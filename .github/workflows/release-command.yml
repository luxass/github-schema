name: Release Command

on:
  repository_dispatch:
    types: [release-command]

jobs:
  make-release:
    permissions:
      issues: write
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    if: ${{ github.event.sender.login == 'luxass' }}
    steps:
      - uses: actions/checkout@v4

      - name: print args
        run: |
          echo "args: ${{ toJson(github.event.client_payload.slash_command.args) }}"
          echo "named: ${{ toJson(github.event.client_payload.slash_command.args.named) }}"
          echo "unnamed: ${{ toJson(github.event.client_payload.slash_command.args.unnamed) }}"

          echo "sender: ${{ github.event.sender.login }}"

      - name: ensure the reviews are met
        id: reviews
        run: |
          REVIEWS=$(gh api \
              -H "Accept: application/vnd.github.full+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/pulls/${{ github.event.client_payload.github.payload.issue.number }}/reviews \
              --jq 'if any(.[]; .state == "APPROVED" and .user.login == "luxass"
            ) then true else false end')

          if [[ $REVIEWS != "true" ]]; then
            gh api \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/issues/${{ github.event.client_payload.github.payload.issue.number }}/comments \
              -f body=$'Hi, @luxass.\nYou can\'t release this pull request, because you haven\'t approved it yet.\nplease approve it and try again.'

            echo "reviewed=false" >> $GITHUB_OUTPUT
          else
            echo "reviewed=true" >> $GITHUB_OUTPUT
          fi

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: get the release version
        if: steps.reviews.outputs.reviewed == 'true'
        id: vars
        run: |
          version=${{ github.event.client_payload.slash_command.args.unnamed.arg1 }}
          if [[ -z "$version" ]]; then
            echo "missing a version"
            exit 1
          fi

          echo "version=$version" >> $GITHUB_OUTPUT

      - name: check if the version already exists on NPM
        id: npm
        run: |
          PACKAGE_VERSION=${{ steps.vars.outputs.version }}

          PACKAGE_INFO=$(npm show "github-schema" versions --json)

          if echo "$PACKAGE_INFO" | grep -q "$PACKAGE_VERSION"; then
            BODY=$'Hi, @luxass.\n\nThe version you tried to release, already exists on npm. Please choose a different version and try again.'
            echo "already_exists=true" >> $GITHUB_OUTPUT
          else
            BODY=$'Hi, @luxass.\n\nI'm going to try and create a release for version ${{ steps.vars.outputs.version }}.'
            echo "already_exists=false" >> $GITHUB_OUTPUT
          fi

          gh api \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/issues/${{ github.event.client_payload.github.payload.issue.number }}/comments \
            -f body="$BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: merge pr
      #   if: steps.npm.outputs.already_exists != 'true'
      #   id: merge
      #   run: |
      #     PR_NUMBER=${{ github.event.client_payload.github.payload.issue.number }}
      #     VERSION=${{ steps.vars.outputs.version }}

      #     echo "PR_NUMBER=$PR_NUMBER"
      #     echo "VERSION=$VERSION"

      #     OUTPUT=$(gh api \
      #       --method PUT \
      #       -H "Accept: application/vnd.github+json" \
      #       -H "X-GitHub-Api-Version: 2022-11-28" \
      #       /repos/${{ github.repository }}/pulls/${{ github.event.client_payload.github.payload.issue.number }}/merge \
      #       -f commit_title="feat: updated github graphql schema" \
      #       -f merge_method=squash)

      #     MERGED=$(echo "$OUTPUT" | jq -r '.merged')

      #     echo "merged=$MERGED" >> $GITHUB_OUTPUT

      # - name: bump version
      #   if: steps.npm.outputs.already_exists != 'true' && steps.merge.outputs.merged == 'true'
      #   run: |
      #     git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
      #     git config --global user.name "github-actions[bot]"
      #     npx bumpp --yes ${{ steps.vars.outputs.version }}





